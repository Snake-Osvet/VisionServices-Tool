from Config.Util import *
from Config.Config import *

try:
    import requests
    from bs4 import BeautifulSoup
    from urllib.parse import urlparse, urljoin
except Exception as e:
   ErrorModule(e)
   
Title("Sql Vulnerability")

def get_domain(url):
    parsed_url = urlparse(url)
    return parsed_url.netloc

def extract_internal_links(base_url, html_content):
    soup = BeautifulSoup(html_content, 'html.parser')
    internal_links = []
    domain = get_domain(base_url)
    for link in soup.find_all('a', href=True):
        href = link['href']
        full_url = urljoin(base_url, href)
        if get_domain(full_url) == domain or href.startswith('/'):
            internal_links.append(full_url)
    return internal_links

def detect_sql_error(url):
    sql_error_keywords = [
        "MySql", "sql", "SQL", "Sql", "Error","Warning", "MySQL", "mysql", "SQL syntax", 
        "SQL error", "Failed to evaluate", "SQLSTATE", "ORA-", "PL/SQL", "PostgreSQL",
        "sqlite3", "DB2", "Microsoft OLE DB Provider for SQL Server",
        "Driver][SQLFetchBuffer", "Postgres", "MariaDB", "Microsoft SQL Server",
        "Sybase", "SQLite", "SQLite3", "Oracle", "ODBC", "JDBC",
        "Microsoft Access Driver", "SQL Server", "SQL command not properly ended",
        "SQL statement not ended properly", "SQL Exception", "SQL Server error",
        "PostgreSQL error", "Oracle error", "DB2 SQL error", "SQLite error",
        "MariaDB error", "NoSQL error", "Error in SQL syntax",
        "You have an error in your SQL syntax", "Incorrect syntax near",
        "Syntax error", "Unclosed quotation mark after the character string",
        "The multi-part identifier could not be bound", "Operand type clash",
        "The used SELECT statements have a different number of columns",
        "Column count doesn't match value count", "Invalid column name",
        "Unknown column", "Table 'database.table' doesn't exist",
        "Unknown table", "Table alias", "Unknown database", "Duplicate entry",
        "Data too long", "Division by zero", "Arithmetic overflow error",
        "Numeric overflow", "Numeric value out of range",
        "Truncated incorrect DOUBLE value", "Access denied for user",
        "Authentication failed", "Connection refused", "Connection timed out",
        "Host 'xxx.xxx.xxx.xxx' is not allowed to connect to this MySQL server",
        "Too many connections", "Out of memory", "Lock wait timeout exceeded",
        "Deadlock found", "Foreign key constraint", "Deadlock", "Key not found",
        "Index not found", "Duplicate key", "Duplicate entry for key",
        "Primary key constraint", "Cannot add or update a child row",
        "Cannot delete or update a parent row", "Cannot drop the table",
        "Cannot create the database", "Cannot create the table",
        "Cannot drop the database",
        "Cannot truncate a table referenced in a foreign key constraint",
        "Cannot drop the index", "Cannot modify column",
        "Cannot delete a parent row",
        "Cannot truncate a table referenced in a foreign key constraint",
        "Table doesn't support FULLTEXT indexes", "Incorrect date value",
        "Invalid datetime format", "Invalid date", "Invalid time",
        "Invalid default value", "Invalid use of NULL value", "Data truncated",
        "Data too long for column", "Invalid TIMESTAMP value", "Error writing file",
        "File could not be opened", "Can't read dir", "Can't create/write to file",
        "Disk full", "Internal server error", "Internal error", "Server error",
        "General error", "Unknown error", "Unspecified error", "Fatal error",
        "Unknown character set", "Unknown collation", "Charset mismatch",
        "Illegal mix of collations", "Client does not support authentication protocol",
        "Client does not support authentication protocol requested by server",
        "Client does not support SSL",
        "Client does not support authentication protocol requested by server",
        "Connection using old (pre-4.1.1) authentication protocol refused",
        "Password authentication failed", "Access denied", "Permission denied",
        "No such file or directory", "Operation not permitted",
        "Too many open files", "File not found", "File already exists",
        "Directory not found", "No such file or directory", "File exists",
        "No space left on device", "Read-only file system", "Input/output error",
        "Permission denied", "Error while loading shared libraries",
        "Library not loaded", "Unable to open database file",
        "Database disk image is malformed", "Database or disk is full",
        "Database is locked", "SQLite busy", "Unable to open database",
        "Unable to fetch row", "Rowid not found", "Database table is locked",
        "Database schema has changed", "SQLite constraint violation",
        "Failed to",
    ]

    error_sql = False
    vulnerability_url = url

    code_sql = [
        ".php?id=", ".php?kat=", ".php?style=", ".php?rubid=", ".php?mn=",
        ".php?n=", ".php?lang=", ".php?view=", ".php?cID=", ".php?aID=",
        ".php?page=", ".php?"
    ]

    for code in code_sql:
        if code in url:
            try:
                parts = url.split(code)
                if len(parts) > 1:
                    vulnerability_url = parts[0] + code + parts[1] + "'"
                    response = requests.get(vulnerability_url)
                    content = response.text
                    for keyword in sql_error_keywords:
                        if keyword in content:
                            error_sql = True
                            return error_sql, vulnerability_url
            except Exception as e:
                print(f"{red}{ERROR} Error: {white}{e}")

    return error_sql, vulnerability_url
def get_all_internal_links_recursive(start_url, visited=None):
    if visited is None:
        visited = set()
    domain = get_domain(start_url)
    visited.add(start_url)
    response = requests.get(start_url)
    internal_links = extract_internal_links(start_url, response.content)
    for link in internal_links:
        full_url = urljoin(start_url, link)
        if full_url not in visited and get_domain(full_url) == domain:
            error_sql, vulnerability_url = detect_sql_error(full_url)
            if error_sql == True:
                print(f"{green}[{white}{current_time_hour()}{green}] {GEN_VALID} Vulnerability: {white}{error_sql}{green}  | Url: {white}{full_url}")
            elif error_sql == False:
                print(f"{red}[{white}{current_time_hour()}{red}] {GEN_INVALID} Vulnerability: {white}{error_sql}{red} | Url: {white}{full_url}")

            get_all_internal_links_recursive(full_url, visited)

start_url = input(f"\n{INPUT} Website Url -> {white}")

print(f"{INFO} Vulnerability Search On: {white}{start_url}")
try:
    get_all_internal_links_recursive(start_url)
    print(f"{INFO} Finish.")
    Continue()
    Reset
except:
    print(f"{INFO} Finish.")
    Continue()
    Reset